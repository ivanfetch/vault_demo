#!/bin/bash
# This user data installs Nginx and Hashicorp Vault.
# This is meant only to demo vault, and not for production use!


# THis is used as the Nginx server name.
ec2_hostname=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)


# Use the Nginx provided package.
cat <<EOF >/etc/apt/sources.list.d/nginx.list
# Nginx-provided packages
deb http://nginx.org/packages/ubuntu/ bionic nginx
deb-src http://nginx.org/packages/ubuntu/ bionic nginx
EOF


# This GPG key allows verifying signatures from the Nginx repository.
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ABF5BD827BD9BF62


echo Updating packages. . .
apt-get update
apt-get upgrade -y


echo Installing prerequisite packages. . .
apt-get install nginx unzip


echo Creating a self-signed SSL certificate. . .
mkdir /etc/nginx/ssl
openssl req -new \
  -newkey ec \
  -pkeyopt ec_paramgen_curve:prime256v1 \
  -days 365 \
  -nodes -x509 \
  -subj "/C=US/ST=Colorado/L=Denver/O=ReactiveOps/CN=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)" \
  -keyout /etc/nginx/ssl/ssl.key -out /etc/nginx/ssl/ssl.crt


echo Removing the default Nginx configuration and creating our own. . .
rm -f /etc/nginx/conf.d/default.conf
cat <<EOF >/etc/nginx/conf.d/app.conf
server {
	listen 80;
	server_name $ec2_hostname;
	return 301 https://\$host\$request_uri;
}


server {
	ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
	ssl_protocols TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 10m;

	listen 443 ssl;
	listen [::]:443 ssl;
	server_name $ec2_hostname;
	ssl_certificate /etc/nginx/ssl/ssl.crt;
	ssl_certificate_key /etc/nginx/ssl/ssl.key;

	location / {
		proxy_pass http://127.0.0.1:8200;
}
}
EOF


echo Downloading Hashicorp Vault to /usr/local/bin. . .
curl -o /tmp/vault.zip 'https://releases.hashicorp.com/vault/0.10.4/vault_0.10.4_linux_amd64.zip'
unzip -d /usr/local/bin /tmp/vault.zip && rm -f /tmp/vault.zip


echo Creating vault user, systemd unit, filesystem storage location, and configuration. . .
useradd -m -c 'Hashicorp Vault' vault
mkdir /var/lib/vault
chown vault:vault /var/lib/vault
chmod o= /var/lib/vault

cat <<EOF >/etc/systemd/system/vault.service
[Unit]
Description=vault server
Requires=network-online.target
After=network-online.target

[Service]
Restart=on-failure
User=vault
Group=vault
PermissionsStartOnly=true
ExecStartPre=/sbin/setcap 'cap_ipc_lock=+ep' /usr/local/bin/vault
ExecStart=/usr/local/bin/vault server -config /etc/vault.conf
ExecReload=/bin/kill -HUP $MAINPID
KillSignal=SIGINT

[Install]
WantedBy=multi-user.target
EOF

cat <<EOF >/etc/vault.conf
ui = true

backend "file" {
        path = "/var/lib/vault"
}

listener "tcp" {
        tls_disable = 1
}
EOF
chown root:vault /etc/vault.conf
chmod 640 /etc/vault.conf


echo Starting Vault
systemctl start vault
sleep 1


echo Initializing Vault and saving the keys and root token. . .
export VAULT_ADDR=http://127.0.0.1:8200
vault operator init >/vault_init.txt 2>&1
chown ubuntu /vault_init.txt
chmod go= /vault_init.txt


echo Restarting Nginx to serve Vault. . .
service nginx restart


# This allows the vault CLI to beu sed from the EC2 instance,
# since it is not using TLS.
echo Creating a bash profile snippet to point the vault CLI at this HTTP instance of Vault. . .
echo export VAULT_ADDR=http://127.0.0.1:8200 >/etc/profile.d/vault.sh
chmod 644 /etc/profile.d/vault.sh

